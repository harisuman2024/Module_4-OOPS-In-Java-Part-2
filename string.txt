Compiled from "String.java"
public final class .String implements java.io.Serializable, .Comparable<.String>, .CharSequence {

  public .String();
  public .String(.String);
  public .String(char[]);
  public .String(char[], int, int);
  public .String(int[], int, int);
  public .String(byte[], int, int, int);
  public .String(byte[], int);
  public .String(byte[], int, int, .String) throws java.io.UnsupportedEncodingException;
  public .String(byte[], int, int, java.nio.charset.Charset);
  public .String(byte[], .String) throws java.io.UnsupportedEncodingException;
  public .String(byte[], java.nio.charset.Charset);
  public .String(byte[], int, int);
  public .String(byte[]);
  public .String(.StringBuffer);
  public .String(.StringBuilder);
  .String(char[], boolean);
  public int length();
  public boolean isEmpty();
  public char charAt(int);
  public int codePointAt(int);
  public int codePointBefore(int);
  public int codePointCount(int, int);
  public int offsetByCodePoints(int, int);
  void getChars(char[], int);
  public void getChars(int, int, char[], int);
  public void getBytes(int, int, byte[], int);
  public byte[] getBytes(.String) throws java.io.UnsupportedEncodingException;
  public byte[] getBytes(java.nio.charset.Charset);
  public byte[] getBytes();
  public boolean equals(.Object);
  public boolean contentEquals(.StringBuffer);
  public boolean contentEquals(.CharSequence);
  public boolean equalsIgnoreCase(.String);
  public int compareTo(.String);
  public int compareToIgnoreCase(.String);
  public boolean regionMatches(int, .String, int, int);
  public boolean regionMatches(boolean, int, .String, int, int);
  public boolean startsWith(.String, int);
  public boolean startsWith(.String);
  public boolean endsWith(.String);
  public int hashCode();
  public int indexOf(int);
  public int indexOf(int, int);
  public int lastIndexOf(int);
  public int lastIndexOf(int, int);
  public int indexOf(.String);
  public int indexOf(.String, int);
  static int indexOf(char[], int, int, .String, int);
  static int indexOf(char[], int, int, char[], int, int, int);
  public int lastIndexOf(.String);
  public int lastIndexOf(.String, int);
  static int lastIndexOf(char[], int, int, .String, int);
  static int lastIndexOf(char[], int, int, char[], int, int, int);
  public .String substring(int);
  public .String substring(int, int);
  public .CharSequence subSequence(int, int);
  public .String concat(.String);
  public .String replace(char, char);
  public boolean matches(.String);
  public boolean contains(.CharSequence);
  public .String replaceFirst(.String, .String);
  public .String replaceAll(.String, .String);
  public .String replace(.CharSequence, .CharSequence);
  public .String[] split(.String, int);
  public .String[] split(.String);
  public static .String join(.CharSequence, .CharSequence...);
  public static .String join(.CharSequence, .Iterable<? extends .CharSequence>);
  public .String toLowerCase(java.util.Locale);
  public .String toLowerCase();
  public .String toUpperCase(java.util.Locale);
  public .String toUpperCase();
  public .String trim();
  public .String toString();
  public char[] toCharArray();
  public static .String format(.String, .Object...);
  public static .String format(java.util.Locale, .String, .Object...);
  public static .String valueOf(.Object);
  public static .String valueOf(char[]);
  public static .String valueOf(char[], int, int);
  public static .String copyValueOf(char[], int, int);
  public static .String copyValueOf(char[]);
  public static .String valueOf(boolean);
  public static .String valueOf(char);
  public static .String valueOf(int);
  public static .String valueOf(long);
  public static .String valueOf(float);
  public static .String valueOf(double);
  public native .String intern();
  public int compareTo(.Object);
  static {};
}
